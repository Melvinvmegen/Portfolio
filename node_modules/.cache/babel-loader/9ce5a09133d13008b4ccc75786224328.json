{"ast":null,"code":"var _jsxFileName = \"/home/melvin/code/Melvinvmegen/melvinvmegen.github.io/src/Components/Newsletter/Newsletter.js\";\nimport React, { Component, Fragment } from 'react';\nimport Button from '../FormSubmit/FormSubmit';\nimport Input from \"../Input/Input\";\nimport axios from '../../axios-contacts';\nimport classes from './Newsletter.module.css';\nimport Spinner from \"../Spinner/Spinner\";\n\nclass Newsletter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      orderForm: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email@gmail.com'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const form = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...form[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      form[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in form) {\n        formIsValid = form[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: form,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.contactHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElement in this.state.orderForm) {\n        formData[formElement] = this.state.orderForm[formElement].value;\n      }\n\n      const contact = {\n        contactData: formData\n      };\n      axios.post('/newsletter.json', contact).then(response => {\n        this.setState({\n          loading: false\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let newsletterForm = React.createElement(\"div\", {\n      className: \"footer-newsletter d-none d-sm-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"menu-item-newsletter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Rejoingnez ma newsletter\")), React.createElement(\"form\", {\n      onSubmit: this.contactHandler,\n      className: classes.newsletterForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      classInput: classes.newsletterInput,\n      classDiv: classes.newsletterDiv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(Button, {\n      wrapperClass: classes.wrapperBtnForm,\n      btnClass: classes.btnNewsletter,\n      id: classes.submitForm,\n      action: \"S'inscrire\",\n      formIsValid: this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n\n    if (this.state.loading) {\n      contactForm = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, contactForm);\n  }\n\n}\n\nexport default Newsletter;","map":{"version":3,"sources":["/home/melvin/code/Melvinvmegen/melvinvmegen.github.io/src/Components/Newsletter/Newsletter.js"],"names":["React","Component","Fragment","Button","Input","axios","classes","Spinner","Newsletter","state","loading","orderForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","formIsValid","inputChangedHandler","event","inputIdentifier","form","updatedFormElement","target","checkValidity","setState","contactHandler","preventDefault","formData","formElement","contact","contactData","post","then","response","catch","error","rules","isValid","trim","pattern","test","render","formElementsArray","key","push","id","config","newsletterForm","map","newsletterInput","newsletterDiv","wrapperBtnForm","btnNewsletter","submitForm","contactForm"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport Button from '../FormSubmit/FormSubmit'\nimport Input from \"../Input/Input\"\nimport axios from '../../axios-contacts'\nimport classes from './Newsletter.module.css'\nimport Spinner from \"../Spinner/Spinner\";\n\n\nclass Newsletter extends Component {\n  state = {\n    loading: false,\n    orderForm: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email@gmail.com'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    formIsValid: false\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const form = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...form[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    form[inputIdentifier] = updatedFormElement\n    let formIsValid = true;\n    for (let inputIdentifier in form) {\n      formIsValid = form[inputIdentifier].valid && formIsValid;\n\n    }\n    this.setState({ orderForm: form, formIsValid: formIsValid })\n  }\n\n  contactHandler = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const formData = {};\n    for (let formElement in this.state.orderForm) {\n      formData[formElement] = this.state.orderForm[formElement].value;\n    }\n    const contact = {\n      contactData: formData\n    }\n    axios.post('/newsletter.json', contact)\n      .then(response => {\n        this.setState({ loading: false })\n      })\n      .catch(error => {\n        this.setState({ loading: false })\n      });\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid\n    }\n    return isValid\n  }\n\n  render() {\n    const formElementsArray = []\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let newsletterForm = <div className=\"footer-newsletter d-none d-sm-block\">\n      <p className=\"menu-item-newsletter\"><span>Rejoingnez ma newsletter</span></p>\n      <form onSubmit={this.contactHandler} className={classes.newsletterForm}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            classInput={classes.newsletterInput}\n            classDiv={classes.newsletterDiv} />\n        ))}\n        <Button wrapperClass={classes.wrapperBtnForm} btnClass={classes.btnNewsletter} id={classes.submitForm} action=\"S'inscrire\" formIsValid={this.state.formIsValid} />\n      </form>\n    </div>;\n\n    if (this.state.loading) {\n      contactForm = <Spinner />\n    }\n\n    return (\n      <Fragment>\n        {contactForm}\n      </Fragment>\n    )\n  }\n}\n\nexport default Newsletter;\n"]},"metadata":{},"sourceType":"module"}