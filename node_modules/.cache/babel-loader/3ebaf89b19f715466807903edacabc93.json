{"ast":null,"code":"var _jsxFileName = \"/home/melvin/code/Melvinvmegen/melvinvmegen.github.io/src/Containers/Header/ContactForm/ContactForm.js\";\nimport React, { Fragment } from 'react';\nimport Button from '../../../Components/FormSubmit/FormSubmit';\nimport Input from \"../../../Components/Input/Input\";\nimport { Component } from 'react';\nimport axios from '../../../axios-contacts';\nimport classes from './ContactForm.module.css';\nimport Spinner from \"../../../Components/Spinner/Spinner\";\n\nclass ContactForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Nom, prÃ©nom'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        company: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Entreprise'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'email@gmail.com'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        city: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Ville'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        request: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Demande'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const form = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...form[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      form[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: form\n      });\n    };\n\n    this.contactHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElement in this.state.orderForm) {\n        formData[formElement] = this.state.orderForm[formElement].value;\n      }\n\n      const contact = {\n        contactData: formData\n      };\n      axios.post('/contacts', contact).then(response => {\n        this.setState({\n          loading: false\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n  }\n\n  checkValidity(value, rules) {}\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let contactForm = React.createElement(\"form\", {\n      onSubmit: this.contactHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: classes.titleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Prenons contact\"), formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(Button, {\n      wrapperClass: classes.wrapperBtnForm,\n      btnClass: classes.btnForm,\n      id: classes.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }));\n\n    if (this.state.loading) {\n      contactForm = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, contactForm);\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/melvin/code/Melvinvmegen/melvinvmegen.github.io/src/Containers/Header/ContactForm/ContactForm.js"],"names":["React","Fragment","Button","Input","Component","axios","classes","Spinner","ContactForm","state","loading","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","company","email","city","request","inputChangedHandler","event","inputIdentifier","form","updatedFormElement","target","setState","contactHandler","preventDefault","formData","formElement","contact","contactData","post","then","response","catch","error","checkValidity","rules","render","formElementsArray","key","push","id","config","contactForm","titleForm","map","wrapperBtnForm","btnForm","submitForm"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport Button from '../../../Components/FormSubmit/FormSubmit'\nimport Input from \"../../../Components/Input/Input\"\nimport { Component } from 'react';\nimport axios from '../../../axios-contacts'\nimport classes from './ContactForm.module.css'\nimport Spinner from \"../../../Components/Spinner/Spinner\";\n\nclass ContactForm extends Component {\n  state = {\n    loading: false,\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Nom, prÃ©nom'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false\n      },\n      company: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Entreprise'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'email@gmail.com'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false\n      },\n      city: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Ville'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false\n      },\n      request: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Demande'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false\n      }\n    }\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const form = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...form[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    form[inputIdentifier] = updatedFormElement\n    this.setState({ orderForm: form })\n  }\n\n  contactHandler = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const formData = {};\n    for (let formElement in this.state.orderForm) {\n      formData[formElement] = this.state.orderForm[formElement].value;\n    }\n    const contact = {\n      contactData: formData\n    }\n    axios.post('/contacts', contact)\n      .then(response => { this.setState({ loading: false }) })\n      .catch(error => { this.setState({ loading: false }) });\n  }\n\n  checkValidity(value, rules) {\n\n  }\n\n  render() {\n    const formElementsArray = []\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let contactForm = <form onSubmit={this.contactHandler}>\n      <h2 className={classes.titleForm}>Prenons contact</h2>\n      {formElementsArray.map(formElement => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n      ))}\n      <Button wrapperClass={classes.wrapperBtnForm} btnClass={classes.btnForm} id={classes.submitForm} />\n    </form >;\n    if (this.state.loading) {\n      contactForm = <Spinner />\n    }\n    return (\n      (\n        <Fragment>\n          {contactForm}\n        </Fragment>\n      )\n    )\n  }\n}\n\nexport default ContactForm\n"]},"metadata":{},"sourceType":"module"}